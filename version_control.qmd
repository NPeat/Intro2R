---
title: "git/GitHub"
---

## Version Control

`libary(usethis)` is a wonderful package when using R to manage version control with git.  usethis works with GitHub as the remote location for repository for file distribution.  Repositories and RStudio **projects** (`File > New Project...`) are complimentary reproducible workflows.  

Version control has a unique learning curve where _frustration_ is a regular **initial** experience with git, especially steep for for people unfamiliar with CLI tools.  At the same time, git is a very learnable and highly useful tool.  git version control with GitHub, orchestrated via RStudio and `library(usethis)` makes an excellent  combination for advancing your reproducible workflow.

### Reproducible workflows

A competitive advantage of an RStudio/Tidyverse computational ecosystem (with R/RStudio/Tidyverse/R Markdown/Quarto/git) is the ease of creating, managing, and documenting reproducible workflows.  Reproducibility has rapidly evolving best practices and the RStudio community is well poised to leverage the best practices.  At the same time, reproducibility, is a conceptually broader topic than this ecosystem.  The [CDVS](https://library.duke.edu/data) offers workshops on both the ecosystem and applied tool-suites such as mentioned on this page.


## `library(usethis)`

This is an excellent package that simplifies RStudio project interactions with git repositories, especially when distributing files via GitHub. 

### Tips

#### Clone or fork from GitHub

```{r echo=TRUE, eval=FALSE}
usethis::create_from_github("https://github.com/data-and-visualization/git-tutorial")
```

#### Create the GitHub repo from local

```{r echo=TRUE, eval=FALSE}
library(usethis)
use_git()          # initialize a git repo
use_git_ignore()
use_readme.Rmd()
use_ccby_license()
# Before next step  â†’ stage & commit changes
use_github()       # Connect local repo to GitHub
```

#### Rename default branch

```{r echo=TRUE, eval=FALSE}
library(usethis)
git_default_branch()
git_default_branch_rename()
git_default_branch_rediscover()
```

#### set-up git and manage GitHub credentials

```{r echo=TRUE, eval=FALSE}
# Sign-in to your GitHub account
# Read: https://usethis.r-lib.org/articles/articles/git-credentials.html
# Read: https://usethis.r-lib.org/articles/articles/usethis-setup.html
usethis::create_github_token()
gitcreds::gitcreds_set()
gh::gh_whoami()
usethis::git_sitrep()
usethis::use_git_config(user.name = "Jane Doe", user.email = "jane@example.com")
usethis::git_sitrep()
```


## gitlab

Many report that `library(gitlabr)` is useful for orchestrating GitLab remotes.  

See Also:  [Configuring SSH Keys & Credentials](https://git-rfun.library.duke.edu/ssh_keys.html)  

## More resources  

Please see the introductory Rfun videos about version control & reproducibility. Check out Rfun's [shareable code, slides, datasets, and exercises](https://rfun.library.duke.edu/portfolio/git_workshop/)  
 
[_Happy Git and GitHub for the useR_](http://happygitwithr.com/)  

::: {layout-ncol="2"}  

git/GitHub/RSudio  
<iframe width="560" height="315" src="https://www.youtube.com/embed/r5_v5f6128M" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>  

Reproducibility  
<iframe width="560" height="315" src="https://www.youtube.com/embed/VjDM-XsoHUQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>  

:::  



