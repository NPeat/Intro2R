---
title: "Data Wrangling"
---

`libary(dplyr)` is invoked automatically when you invoke `library(tidyverse)`. So you don't have to load both.  Loading tidyverse is a meta package that includes many other useful packages, e.g. `ggplot2`.

dplyr is the data wrangling package that helps you subset and manipulate your data. The documentation is installed with the package.  However, [the online documentation](https://dplyr.tidyverse.org/) is convenient and easy to read.

Use this package most often for it's five main verbs:

-   `filter()` to subset rows

-   `select()` to subset columns

-   `arrange()` to sort

-   `mutate()` to generate new variables

-   `summarize()` to get column totals

-   `group_by() |> summarize()` to get subtotals

-   `count()` to quickly tally frequencies

***

Honorable mention:


-   `left_join()` to add columns from one table to another

-   `tidyr::pivot_longer()` to reshape wide data to tall

-   `tidyr::pivot_wider()` to reshape tall dat to wide

The [`tidyr` package](https://tidyr.tidyverse.org/) help with critically useful data wrangling functions as well.  Tall data is often easiest for iteration.

## Quick exmaples

**[dplyr](http://dplyr.tidyverse.org/)** is a widely adopted r package, part of tidyverse, which uses **English verbs** to reshape data.

```{r load-packages, message=FALSE, warning=FALSE}
library(tidyverse)
# library(dplyr)
```
```{r}
#| echo: false
#| warning: false
library(rmarkdown)
```


I made a small subset of the `starwars` dataset:  `small_sw`

```{r makesmall_sw_dataframe}

small_sw <- starwars |>  
  select(species, mass, homeworld, name)
```

```{r}
#| eval: false
small_sw
```

```{r}
#| echo: false
# starwars
rmarkdown::paged_table(small_sw)
```


## Arrange


**Arrange** to sort rows (observations) by column headers (variables)

```{r arrange}
#| eval: false
small_sw |>  
  arrange(species, desc(mass), homeworld)
```
```{r arrange-paged}
#| echo: false
small_sw |>  
  arrange(species, desc(mass), homeworld) |> 
  paged_table()
```

## Select

**Select** to choose columns (variables)

```{r select}
#| eval: false
starwars |> 
  arrange(species, desc(mass), homeworld)  |>  
  select(species, mass, homeworld, name:starships)
```
```{r select-paged}
#| echo: false
starwars |> 
  arrange(species, desc(mass), homeworld)  |>  
  select(species, mass, homeworld, name:starships) |> 
  paged_table()
```


## Filter

**Filter** to select rows (observations)

```{r filter}
#| eval: false
starwars_32_mass <- starwars |> 
  filter(mass == 80)

starwars_32_mass    # display filtered data frame

```
```{r filter-paged}
#| echo: false
starwars_32_mass <- starwars |> 
  filter(mass == 80)

starwars_32_mass |>    # display filtered data frame
  paged_table()

```

## Mutate

**Mutate** to create new variables (columns) 

```{r mutate}
#| eval: false
starwars_32_mass |> 
  mutate(BMI = height / mass) |> 
  select(name, BMI, height, mass, hair_color, 1:13)
```
```{r mutate-paged}
#| echo: false
starwars_32_mass |> 
  mutate(BMI = height / mass) |> 
  select(name, BMI, height, mass, hair_color, 1:13) |> 
  paged_table()
```

## Count

**Count** to summarize observations (rows)

```{r count}
#| eval: false
starwars |> 
  count(mass)
```
```{r count-paged}
#| echo: false
starwars |> 
  count(mass) |> 
  paged_table()
```

## Summarize
Summarize to collapse values into a summary

```{r}
#| eval: false
starwars |> 
  group_by(species) |> 
  summarize(Count = n(), 
            mean_ht = mean(height), 
            min_ht = min(height), 
            max_ht = max(height)) |> 
  arrange(desc(Count))
```
```{r}
#| echo: false
starwars |> 
  group_by(species) |> 
  summarize(Count = n(), 
            mean_ht = mean(height), 
            min_ht = min(height), 
            max_ht = max(height)) |> 
  arrange(desc(Count)) |> 
  paged_table()
```

```{r}
#| eval: false
starwars |> 
  ungroup()
```


## Put it all together

We can pipe commands together.  Think of a pipe (i.e. `|>`) as a conjunction.  Any time you see a pipe, think "and then."  You can insert a pipe with 'Ctrl+Shift+M' (Help > Keyboard Shortcuts)

```{r alltogether}
#| eval: false
starwars |> 
  group_by(species) |> 
  summarize(Count = n(), 
            mean_ht = mean(height), 
            min_ht = min(height), 
            max_ht = max(height)) |> 
  arrange(desc(Count)) |> 
  filter(!is.na(mean_ht), Count > 1)
```
```{r alltogether-paged}
#| echo: false
starwars |> 
  group_by(species) |> 
  summarize(Count = n(), 
            mean_ht = mean(height), 
            min_ht = min(height), 
            max_ht = max(height)) |> 
  arrange(desc(Count)) |> 
  filter(!is.na(mean_ht), Count > 1) |> 
  paged_table()
```


## More information

Please see the introductory Rfun video about dplyr. Check out Rfun's [shareable code, slides, datasets, and exercises](https://rfun.library.duke.edu/portfolio/r_flipped/)

<iframe width="560" height="315" src="https://www.youtube.com/embed/PGSXf-NMWVg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


